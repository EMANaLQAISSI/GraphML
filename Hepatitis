CALL gds.graph.create(
    'myGraph',
    {
        Hepatitis: {
            label: 'Live',
            properties: 'class'
        }
    },
    '*'
);

CALL gds.beta.knn.stream('myGraph', {
    topK: 1,
    nodeWeightProperty: 'class',
    // The following parameters are set to produce a deterministic result
    randomSeed: 20,
    concurrency: 1,
    sampleRate: 1.0,
    deltaThreshold: 0.0
})
YIELD node1, node2, similarity
RETURN gds.util.asNode(node1).patient AS HepatitisPatient1, gds.util.asNode(node2).patient AS HepatitisPatient2, similarity
ORDER BY similarity DESCENDING, HepatitisPatient1, HepatitisPatient2;

CALL gds.beta.knn.stats('myGraph', {topK: 1, concurrency: 1, randomSeed: 20, nodeWeightProperty: 'class'})
YIELD nodesCompared, similarityPairs;

CALL gds.beta.knn.mutate('myGraph', {
    mutateRelationshipType: 'KNN_SIMILAR',
    mutateProperty: 'KNNscore',
    topK: 1,
    randomSeed: 20,
    concurrency: 1,
    nodeWeightProperty: 'class'
})
YIELD nodesCompared, relationshipsWritten;

CALL gds.beta.knn.write('myGraph', {
    writeRelationshipType: 'KNN_SIMILAR',
    writeProperty: 'KNNscore',
    topK: 1,
    randomSeed: 20,
    concurrency: 1,
    nodeWeightProperty: 'class'
})
YIELD nodesCompared, relationshipsWritten;



CALL gds.beta.pipeline.nodeClassification.create('pipe');

CALL gds.graph.create(
  'Hepatitis',
  'Live',
  {
    KNN_SIMILAR: {
      orientation: 'UNDIRECTED',
      properties: 'KNNscore'
    }
  },
  { nodeProperties: ['class','Age','Sex','Steroid','Antivirals','Fatigue',	'Malaise',	'Anorexia',	'Liver_big', 'Liver_firm',
	'Spleen_palable',	'Spiders',	'Ascites',	'Varices',	'Bilirubin_test',	'Alk_phosphate',	
'Sgot_test',	'Albumin'] }
)
CALL gds.fastRP.stream('Hepatitis',
  {
    embeddingDimension: 4,
    randomSeed: 20
  }
)
YIELD nodeId, embedding;

CALL gds.fastRP.stats('Hepatitis', { embeddingDimension: 8 })
YIELD nodeCount

CALL gds.fastRP.mutate(
  'Hepatitis',
  {
    embeddingDimension: 8,
    mutateProperty: 'fastRP'
  }
)
YIELD nodePropertiesWritten;

CALL gds.fastRP.write(
  'Hepatitis',
  {
    embeddingDimension: 8,
    writeProperty: 'fastRP'
  }
)
YIELD nodePropertiesWritten;

CALL gds.beta.pipeline.nodeClassification.addNodeProperty('pipe', 'scaleProperties', {
  nodeProperties: 'Albumin','Bilirubin_test'
  scaler: 'Mean',
  mutateProperty:'scaledAlbumin', 'scaledBilirubin_test'
})
YIELD name, nodePropertySteps



CALL gds.beta.pipeline.nodeClassification.selectFeatures('pipe', ['class','Age','Sex','Steroid','Antivirals','Fatigue',	'Malaise',	'Anorexia',	'Liver_big', 'Liver_firm',
	'Spleen_palable',	'Spiders',	'Ascites',	'Varices',	'Bilirubin_test',	'Alk_phosphate',	
'Sgot_test',	'Albumin','scaledAlbumin', 'scaledBilirubin_test'] )
YIELD name, featureProperties;
 
CALL gds.beta.pipeline.nodeClassification.configureSplit('pipe', {
 testFraction: 0.2,
  validationFolds: 10
})
YIELD splitConfig;
 
 
 
CALL gds.alpha.pipeline.nodeClassification.addRandomForest('pipe', {
{criterion:ENTROPY, maxdepth:2147483647,minleafsize:1,numberOfDecisionTrees: 10, minsplitsize:2,samplesRatio:0.0,maxFeaturesRatio:1.0}
{criterion:Gini, maxdepth:2147483647,minleafsize:1,numberOfDecisionTrees: 15, minsplitsize:2,samplesRatio:2.0,maxFeaturesRatio:1.0}
{criterion:Gini, maxdepth:2147483647,minleafsize:1,numberOfDecisionTrees: 10, minsplitsize:2,samplesRatio:1.0,maxFeaturesRatio:1.0}
{criterion:ENTROPY, maxdepth:2147483647,minleafsize:1,numberOfDecisionTrees: 10, minsplitsize:5,samplesRatio:5.0,maxFeaturesRatio:1.0}
{criterion:Gini, maxdepth:2147483647,minleafsize:1,numberOfDecisionTrees: 20, minsplitsize:2,samplesRatio:1.0,maxFeaturesRatio:1.0}
{criterion:Gini, maxdepth:2147483647,minleafsize:1,numberOfDecisionTrees: 10, minsplitsize:6,samplesRatio:0.0,maxFeaturesRatio:1.0}
{criterion:ENTROPY, maxdepth:2147483647,minleafsize:1,numberOfDecisionTrees: 5, minsplitsize:3,samplesRatio:1.0,maxFeaturesRatio:1.0}
{criterion:ENTROPY, maxdepth:2147483647,minleafsize:1,numberOfDecisionTrees: 10, minsplitsize:2,samplesRatio:0.0,maxFeaturesRatio:1.0}
{criterion:Gini, maxdepth:2147483647,minleafsize:1,numberOfDecisionTrees: 20, minsplitsize:4,samplesRatio:3.0,maxFeaturesRatio:1.0}
{criterion:Gini, maxdepth:2147483647,minleafsize:1,numberOfDecisionTrees: 5, minsplitsize:2,samplesRatio:0.0,maxFeaturesRatio:1.0}



})
YIELD parameterSpace
RETURN parameterSpace.RandomForest AS randomForestSpace;

CALL gds.alpha.pipeline.nodeClassification.configureAutoTuning('pipe', {
  maxTrials: 2
}) YIELD autoTuningConfig

CALL gds.beta.pipeline.nodeClassification.train.estimate('myGraph', {
  pipeline: 'pipe',
  nodeLabels: ['Hepatitis'],
  modelName: 'nc-model',
  targetProperty: 'class',
  randomSeed: 20,
  metrics: [ 'ACCURACY','F1_WEIGHTED' ]
})
YIELD requiredMemory;
 
CALL gds.beta.pipeline.nodeClassification.train('myGraph', {
  pipeline: 'pipe',
  nodeLabels: ['Hepatitis'],
  modelName: 'n-pipeline-model',
  targetProperty: 'class',
  randomSeed: 20,
  metrics: ['ACCURACY','F1_WEIGHTED']
}) YIELD modelInfo, modelSelectionStats
RETURN
  modelInfo.bestParameters AS winningModel,
  modelInfo.metrics.F1_WEIGHTED.train.avg AS avgTrainScore,
  modelInfo.metrics.F1_WEIGHTED.outerTrain AS outerTrainScore,
  modelInfo.metrics.F1_WEIGHTED.test AS testScore,
  [cand IN modelSelectionStats.modelCandidates | cand.metrics.F1_WEIGHTED.validation.avg] AS validationScores



